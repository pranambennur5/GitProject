Tutorial

DevOps Introduction:

Below 3 belongs to Development (Dev):

GIT 		🡪 Version Control
Maven 		🡪 Build Tool (Compiles Code) Convert .java to .class (binary)
Jenkins 	🡪 (CI -CD)

Below tools belongs to Operations (Ops):

Docker 		🡪 Container
Kubernetes 	🡪 Orchestration | Container Management Tool
Ansible/Puppet	🡪 Configuration Management Tools
Terraform 	🡪 Cloud Provision Tool
DevSecOps	🡪 Left Shift Rule. 


Example: 


							    (Storing App Code)	






Web Application			Source Code Storage



      Tomcat Server



	Deploy/Release	Build/Compile
	Maven
	

flipkart.war (web archive)

Flipkart.com									Local Machine

Virtualization
Containers
More Time to:
Less Time to:
Create
Create
Start
Start
Stop
Stop
Heavy Memory
Less Memory



Docker: 
Docker is a software platform that allows you to build, test, and deploy applications quickly. Docker packages software into standardized units called containers that have everything the software needs to run including libraries, system tools, code, and runtime. Using Docker, you can quickly deploy and scale applications into any environment and know your code will run.

Docker is an OS for containers. 
Containers are created by the image of the build (software).

Kubernetes (K8S):
Without bringing the environment down, new code can be deployed to the Production environment using K8S. This is called Zero Downtime Release (ZDR)

Self-healing
Auto Scale
App Roll back. 

Note:

To compile below codes:

JAVA:
---------------
MAVEN
ANT
GRADLE

.NET:
---------------
MSBUILD
NANT

C/C++:
---------------
MAKE



Linux Basics

https://www.hostinger.in/tutorials/linux-commands

Commands

pwd (path to working directory)
cd (change directory)
cd ..
cd . 
ls (list)
ls -l
ls -ltr
ls -a
cat
cat -n filename
cat -b filename (to skip empty line  while counting number of lines)
To create a file using cat → cat > filename.txt (Enter + write text + Ctrl+d)
clear (Ctrl + l)
man “command” (manual)
cp (copy)
mv (move)
mkdir (make directory)
To create multiple directory → mkdir -p parent directory name/child directory name
rm (remove)
rm -r 
rm -rf (f 🡪no errors)
touch filename
locate filename
(Before using locate command, update database using “sudo updated” command)
find
Find files in the current directory → find . -name filename
Find files under home directory   → find /home -name filename
Find all empty files → find /tmp -type f -empty
Find all files based on user → find /home -user (username)
Find last 50 days modified file → find / -mtime 50
Find 50MB files → find / -size 50M
Find and delete 100MB files → find / -type f  -size +100M -exec rm -f {} \;
grep 
grep -i string filename (ignore case)
grep -ic string filename (count)
grep -in string filename (line number)
grep -v string filename (searching for lines without certain string)
grep string -B 2 filename (searching a string & 2 lines before it)
grep string -A 2 filename (searching a string & 2 lines after it)
grep -r string (search string in all files in current directory)
sudo (for admin or root permission)
sudo su username → login as sudo user. 
whoami → prints current user. 
df (disk free)
df -kh .
du -sh filename (disk usage)
head filename
head filename -n2
tail filename -n2
Example: head filename -n28 | tail -n1
diff file1 file2
vimdiff file1 file2
tar -cvf filename.tar filename (create)
tar -xvf filename (xtract)
chmod 777 filename
chmod +x filename
id (to know the groups that user is part of)
grep user etc/group | cut -d “:” -f1
chown user:group filename (both user & group will be same)
job (to get the process that are running in the background)
ps -ef (print all the processes)
ps -ef | grep firefox
kill -9 ProcessID
ping (to check the network connection)
wget -P /home/Desktop/DevOps/ “link” (to download file from web)
uname -a (prints info about OS & system hardware)
top (running process and CPU time)
history (list all previous commands)
hostname (name of the machine)
ifconfig (IP address & other network details)
zip file1.zip file1
unzip file1.zip
awk
vim
Delete a line 🡪 dd
Copy a line 🡪 yy
Paste → p
Delete single character 🡪 x
Undo 🡪 u
Redo 🡪 Ctrl + r
Delete word 🡪 dw
Search work 🡪 /
Search next 🡪 n
Search backward 🡪 Shift + n
Jump to a particular line 🡪 lineNumber + G or :lineNumber
Find & Replace 🡪 :% s/existingWord/replaceWord/g
Find & Replace interactively → %s/existingWord/replaceWord/gc
To open multiple windows 🡪 vim -O file1 file2
Move cursor to next window 🡪 Ctrl + ww
Show line number → :set number
To check/edit vim related configuration 🡪 vim .vimrc 
Adding user
To list all local users you can use:
cut -d: -f1 /etc/passwd
To add
To add a new user you can use:
sudo adduser new_username
or:
sudo useradd new_username

To remove/delete
To remove/delete a user, first you can use:
sudo userdel username
Then you may want to delete the home directory for the deleted user account :
sudo rm -r /home/username
To modify
To modify the username of a user:
usermod -l new_username old_username
To change the password for a user:
sudo passwd username
To change the shell for a user:
sudo chsh username
To change the details for a user (for example real name):
sudo chfn username
To add a user to the sudo group:
adduser username sudo
or
usermod -aG sudo username
To create a password
sudo passwd username

Note: 
How do you set a hostname??
(You should be a root user)
vim /etc/hosts
vim /etc/hostname
 Logout and login 
How to print line numbers using awk command??
awk ‘{print NR $0}’ file.txt




GIT 

https://github.com/wicultydotcom/devops-class-notes

GIT is an open-source version control management tool. 

Note:  
Paid Version Control Tools are:
TFS (Team Foundation Server) - Microsoft
Perforce
Clear Case – IBM

Advantages of GIT:
Overwrite
History (Tracking the code change)

Version Control Systems

Local VCS. Eg: RCS
Centralized VCS. Eg: Perforce
Distributed VCS. Eg: GIT

Installing GIT

To verify git Installation:
	$which git (/usr/bin/git)
	$git --version

To set config values
$git config --global user.name “pranambennur5”
$git config --global user.email “pranambennur@gmail.com”
$git config --list


To install git
$ sudo apt-get update
$ sudo apt-get install git

GIT Uninstallation:
$ sudo apt-get remove git

Clone the source code from remote repository using 'git clone' command
	$git clone https://github.com/pranambennur5/GitProject 

Display status update of the repository 
$git status 

After adding/updating a file

To add file to stage from the source
$git add bugfixfile

To commit the changes to .git
$git commit -m “add a file to fix favorites” bugfixfile

To commit the changes directly to .git without adding to stage
$git commit -am “add a file to fix favorites” bugfixfile

Will display all the commits 
$git log 

To push the changes to repository
$git push 

To update the local repository
	$git pull origin main

To save the access token in the machine
$git remote set-url origin https://pranambennur5:
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@github.com

Note: in the above command
- 'pranambennur5' is your GitHub user-name.
- ghp_ qvHjEDGo1E4guz4BkUtSU9X9pzQPzn06QCe8 is your token generated from GitHub.
- github.com/pranambennur5/GitProject is your repository path. don't give 'https'


Note: sha1sum filename → will give the commit ID for a file. This changes every time a file is updated. This ID helps to keep track of the changes committed. 

GIT Architecture

# What is VCS? Why do we need VCS?
Version control is a system that records changes to a file or set of files over time so that you can recall specific versions later. 
--> Refer 'ProGit' for official documentation.
https://git-scm.com/book/en/v2



GitHub Practical Knowledge:

Creating remote repository in github
===============
1. create an account in github.com
	URL: https://github.com

2. login github.com with your credentials. 	
	click on "new" --> give a name "flipkart-ecomerce" --> "create reopository" 

3. copy the repo URL from Github:
	https://github.com/nageshvkn/flipkart-ecomerce.git

4. Clone the source code from remote repository using 'git clone' command
	git clone https://github.com/nageshvkn/flipkart-ecomerce.git

5. cd "flipkart-ecomerce" and observe ".git" folder. ".git" is called as "Local Repository".

6. Create some sample code and submit the code to a remote repo.
	--> touch Login.java
	--> git add Login.java
	--> git commit Login.java -m "login module code"
	--> git push --> [refer below topic to generate token as password]

	--> git log Login.java

#
Setting up token to access GitHub
========================================
1. go to https://github.com

2. Generate token from github
click on user-profile icon (top right)  .. click on 'settings' .. click on 'Developer settings' .. click on 'Personal access tokens' .. click on 'Generate new token' .. give a name under 'Note' (example:class) .. select 'No expiration' from 'Expiration' drop-down box .. click on 'repo' check box under 'Select scopes' .. and finally click on 'Generate token' button.

3. Store the token in your machine using below command
$ git remote set-url origin https://nageshvkn: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@github.com/nageshvkn/wiculty29.git

Note: in the above command
- 'nageshvkn' is your GitHub user-name.
- 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 IS your token generated from GitHub.
- github.com/nageshvkn/wiculty29.git is your repository path. don't give 'https'

#
Staging Index/Stage

- Skip staging
	$ git commit -am "submit all pending changes"

Note: If you want to skip the staging, you need to commit all pending changes.
      For a new file, you have to go through the 'stage' process.


# Show all the files that are modified as part of a commit (with content)
git show <Commit Id>
git show b85a6e123


#
- Git Commit structure
	SHA value / commit ID
	User & email
	Date & time stamp
	Commit message
	 
# How is SHA generated?
SHA / Version / Revision / Commit Id


#
Setting up mandatory configurations:
=============================================
$ git config --global user.name "Nageswara Rao P"
$ git config --global user.email "nageshvkn@gmail.com"

Check the configurations using below command
$ git config --list

Git stores all configurations in below file
"$USER_HOME/.gitconfig"


# Understand Git Jargon.
	- Remote Repository
	- Working Directory
	- Local Repository
	- Stage/"Staging Index"
	- SHA

# History
	$ git log Login.java
	$ git log

# List all the commits made by an user
        $ git log --author="harry" 
        
# List all the commits based on the commit message
        $ git log --grep="math function"
        
#Qn.
Show me all commits made by user "harry" AND have a commit message "math function" in it.

$ git log --author="harry" --grep="math function"


# GIT Commands
1.  
# See the content change of a file which is in 'source' area
$ git diff Login.java

# See the content change of a file which is in 'stage' area
$ git diff --staged Login.java

# See the content change of a file after the commit
$ git show 123abc456
$ git diff 123abc..345abc


2. Deleting a file

        A.) git rm OMS.java
	    git commit OMS.java -m "comment"
	    git push
	    
 
3. Renaming a file/folder
	A.) git mv Login.java Login1.java
	    git commit -m "rename Login"
	    git push		
Note:
Git will carry the history of old files to new files. To check complete history..
	$ git log --follow Login1.java


# Undoing the changes:
undo/revert local changes from source area
	$ git checkout -- LoginWeb.java

Unstage the changes from STAGE area
	$ git reset LoginWeb.java


# BRANCHING
	A. What is a branch?
	B. Why and When do we create a branch?
	C. Branching Strategies

# List all active branches in local repository
	$ git branch
	
# Creating a new branch
	$ git branch dev_1.2.3

# Push new branch to remote repository
	$ git push origin dev_1.2.3
		
# Switching from one branch to another
	$ git checkout dev_1.2.3

# Creating and switching to a newly created branch
	$ git checkout -b dev_1.2.4

# How do you clone a remote repository with a particular branch as default
	$ git clone -b dev_1.2.4 https://github.com/nageshvkn/flipkart899.git

# List all remote branches
	$ git branch -r
	
# Deleting a branch
        $ git branch -d dev_1.2.3
        $ git push -d origin dev_1.2.3       


MERGING:
=================

# List all the branches
	$ git branch

# Create a new branch
	$ git branch dev_1.2.3


# Take a file which is common in master and dev_1.2.3 branches.
  ex: Login.java

# Make sure Login.java has below content in master and dev_1.2.3 branch
	Login.java
		line#5 --> int a = 10;
	
# To create a conflict situation, we need to modify the same line in two branches with different content.

	ex: Login.java (master)
			line#5 --> int a =100;
		
		Login.java (dev_1.2.3)
			line#5 --> int a = 200;


# Now merge the code from dev_1.2.3 to master branch
  Before merge, make sure that you are on target branch i.e master (source branch: dev_1.2.3)
	$ git checkout master

# You have master code now, since currently the checkout branch is master. Now bring/merge the changes from dev_1.2.3 to master by running below command. 
Git merge command merges the changes from dev_1.2.3 to master.

	$ git merge dev_1.2.3

# Run git status command to list conflict file

#
  Resolve the conflict and commit the merge

# Run the git push command to move the merge to Remote.


# What is Conflict:
If two users modify the same file in source and target branches and if the same line has different content, git can't decide which user's code it has to take. We call this situation as conflict.

# How do you resolve the conflict: 
- Open the conflict file--> remove conflict markers--> select the right content 
  based on the discussion with developers
- git add
- git commit (after compilation and some z sanity testing)
- git push

Note:
Use the below command to find the owner of the conflict code. How do you find the user who modified/added conflicted code?
        - $ git checkout master
          $ git blame Login.java
          
        - $ git checkout dev_1.2.3
          $ git blame Login.java
          
#	
git remote
	PULL
	FETCH
	
	PUSH
	CLONE
	
#
How to push a particular commit to remote?
$ git push origin 3160a392f3844d117289e248b5a910c38e646a1f:master
Syntax: $ git push origin <Commit-ID>:branch


NOTES:
SVN & Git differences:
==========================
- Centralized VCS -  Ex: CVS/SVN/Clearcase/Perforce
- Distributed VCS -  Ex: GIT/Bitkeeper

1.
SVN is a centralized version control system. In svn, when a user checks out the repository, he will get only the source code. Repository is not distributed to the user. In SVN multiple users connect to a single/centralized server. If that server goes down, no user will be able to work.

	Whereas Git is distributed VCS. In the sense, when a user clones the repository, he will get source code as well as complete repository on his local disk. Since the repository is distributed across multiple users and each user has their own local repository, users will be able to submit the changes locally without connecting to the master server. (i.e he can also work offline)

2.
Git has a staging area. Users can leverage this staging area to stage/save all the changes related to some issue/bug and  commit everything at once into a local repository. hence, all the changes will be recorded as part of a single sha/commit. users get an opportunity to logically group the changes and commit as a single changeset. This enables better tracking.

3.
Since git is distributed in nature, almost all transactions happen locally in the client machine and hence less overhead on the server so git is faster.

3A.
Users are free to create any no. branches in Git. where as in svn, all branches reside in server side, so you may have multiple branches unnecessarily in SVN Remote.

4.
Git seems to be good with merging.

5.
Git stores each change as SHA values but SVN uses simple numbers as revisions.


Qns:
====
Is token user related or project/repository related?

Can we have different tokens for different repositories?


=======
Git Token:
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
